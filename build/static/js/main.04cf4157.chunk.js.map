{"version":3,"sources":["constants.js","Components/SelectCharacter/index.js","assets/twitter-logo.svg","App.js","index.js"],"names":["CONTRACT_ADDRESS","transformCharacterData","characterData","name","imageURI","hp","remainingHealth","toNumber","maxHp","maxHealth","attackDamage","attackPower","SelectCharacter","setCharacterNFT","useState","characters","setCharacters","gameContract","setGameContract","useEffect","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","myEpicGameLogic","abi","console","log","getCharacters","a","getAllDefaultCharacters","charactersTxn","map","error","className","length","character","index","src","alt","type","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","characterNFT","checkIfWalletIsConnected","request","method","accounts","account","connectWalletAction","alert","checkNetwork","networkVersion","fetchNFTMetadata","provider","checkIfUserHasNFT","txn","onClick","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04cf4157.chunk.js","sourcesContent":["const CONTRACT_ADDRESS = '0x4eEb39b23EF88935e26fA9762f6d1C6293C844A5';\n\nconst transformCharacterData = (characterData) => {\n  return {\n    name: characterData.name,\n    imageURI: characterData.imageURI,\n    hp: characterData.remainingHealth.toNumber(),\n    maxHp: characterData.maxHealth.toNumber(),\n    attackDamage: characterData.attackPower.toNumber(),\n  };\n};\n\nconst transformBossData = (bossData) => {\n  return {\n    name: bossData.name,\n    imageURI: bossData.imageURI,\n    hp: bossData.hp.toNumber(),\n    maxHp: bossData.maxHp.toNumber(),\n    attackDamage: bossData.attackDamage.toNumber(),\n  };\n};\n\n\n\nexport { CONTRACT_ADDRESS, transformCharacterData, transformBossData };","import React, { useEffect, useState } from 'react';\nimport './SelectCharacter.css';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGameLogic from '../../utils/MyEpicGameLogic.json';\n\n/*\n * Don't worry about setCharacterNFT just yet, we will talk about it soon!\n */\nconst SelectCharacter = ({ setCharacterNFT }) => {\n\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null);\n\n  // UseEffect\nuseEffect(() => {\n  const { ethereum } = window;\n\n  if (ethereum) {\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const gameContract = new ethers.Contract(\n      CONTRACT_ADDRESS,\n      myEpicGameLogic.abi,\n      signer\n    );\n\n    /*\n     * This is the big difference. Set our gameContract in state.\n     */\n    setGameContract(gameContract);\n  } else {\n    console.log('Ethereum object not found');\n  }\n}, []);\n\nuseEffect(() => {\n  const getCharacters = async () => {\n    try {\n      console.log('Getting contract characters to mint');\n\n      /*\n       * Call contract to get all mint-able characters\n       */\n      const charactersTxn = await gameContract.getAllDefaultCharacters();\n      console.log('charactersTxn:', charactersTxn);\n\n      /*\n       * Go through all of our characters and transform the data\n       */\n      const characters = charactersTxn.map((characterData) =>\n        transformCharacterData(characterData)\n      );\n\n      /*\n       * Set all mint-able characters in state\n       */\n      setCharacters(characters);\n    } catch (error) {\n      console.error('Something went wrong fetching characters:', error);\n    }\n  };\n\n  /*\n   * If our gameContract is ready, let's get characters!\n   */\n  if (gameContract) {\n    getCharacters();\n  }\n}, [gameContract]);\n\n// Render Methods\nconst renderCharacters = () =>\n  characters.map((character, index) => (\n    <div className=\"character-item\" key={character.name}>\n      <div className=\"name-container\">\n        <p>{character.name}</p>\n      </div>\n      <img src={character.imageURI} alt={character.name} />\n      <button\n        type=\"button\"\n        className=\"character-mint-button\"\n       // onClick={mintCharacterNFTAction(index)}\n      >{`Mint ${character.name}`}</button>\n    </div>\n  ));\n\n\n  return (\n    <div className=\"select-character-container\">\n      <h2>Mint Your Hero. Choose wisely.</h2>\n      {characters.length > 0 && (\n      <div className=\"character-grid\">{renderCharacters()}</div>\n    )}\n    </div>\n  );\n};\n\nexport default SelectCharacter;","export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import React, { useEffect, useState } from 'react';\nimport SelectCharacter from './Components/SelectCharacter';\nimport './App.css';\nimport { CONTRACT_ADDRESS, transformCharacterData } from './constants';\nimport myEpicGameLogic from './utils/MyEpicGameLogic.json';\nimport { ethers } from 'ethers';\nimport twitterLogo from './assets/twitter-logo.svg';\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  // State\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [characterNFT, setCharacterNFT] = useState(null);\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log('Make sure you have MetaMask!');\n        return;\n      } else {\n        console.log('We have the ethereum object', ethereum);\n\n        const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n        if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log('Found an authorized account:', account);\n          setCurrentAccount(account);\n        } else {\n          console.log('No authorized account found');\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  /*\n   * Implement your connectWallet method here\n   */\n  const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert('Get MetaMask!');\n        return;\n      }\n\n      /*\n       * Fancy method to request access to account.\n       */\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      /*\n       * Boom! This should print out public address once we authorize Metamask.\n       */\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    const checkNetwork = async () => {\n      try { \n        if (window.ethereum.networkVersion !== '4') {\n          alert(\"Please connect to Rinkeby!\")\n        }\n      } catch(error) {\n        console.log(error)\n      }\n    }\n    checkNetwork();\n  }, []);\n\n  useEffect(() => {\n  /*\n   * The function we will call that interacts with out smart contract\n   */\n  const fetchNFTMetadata = async () => {\n    console.log('Checking for Character NFT on address:', currentAccount);\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const gameContract = new ethers.Contract(\n      CONTRACT_ADDRESS,\n      myEpicGameLogic.abi,\n      signer\n    );\n\n    const txn = await gameContract.checkIfUserHasNFT();\n    if (txn.name) {\n      console.log('User has character NFT');\n      setCharacterNFT(transformCharacterData(txn));\n    } else {\n      console.log('No character NFT found');\n    }\n  };\n\n  /*\n   * We only want to run this, if we have a connected wallet\n   */\n  if (currentAccount) {\n    console.log('CurrentAccount:', currentAccount);\n    fetchNFTMetadata();\n  }\n}, [currentAccount]);\n\n  // Render Methods\nconst renderContent = () => {\n  /*\n   * Scenario #1\n   */\n  if (!currentAccount) {\n    return (\n      <div className=\"connect-wallet-container\">\n        <img\n         src=\"https://c.tenor.com/Y8ehVVH-e3cAAAAC/squid-game.gif\"\n         alt=\"Squid game Gif\"\n        />\n        <button\n          className=\"cta-button connect-wallet-button\"\n          onClick={connectWalletAction}\n        >\n          Connect Wallet To Get Started\n        </button>\n      </div>\n    );\n    /*\n     * Scenario #2\n     */\n  } else if (currentAccount && !characterNFT) {\n    return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\n  }\n};\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">⚔️ Quid Games ⚔️</p>\n          <p className=\"sub-text\">There's strength in unity. Team up to win!</p>\n          {renderContent()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built with @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}